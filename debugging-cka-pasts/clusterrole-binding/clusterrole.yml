# ---
# kind: ClusterRole
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: create-resource
# rules:
# - apiGroups: [""]
#   resources: ["Deployment,StatefulSet,DaemonSet"]
#   verbs: ["create"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# # This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
# kind: ClusterRoleBinding
# metadata:
#   name: read-secrets-global
# subjects:
# - kind: ServiceAccount
#   name: cicd # Name is case sensitive
#   apiGroup: rbac.authorization.k8s.io
# roleRef:
#   kind: ClusterRole
#   name: create-resource
#   apiGroup: rbac.authorization.k8s.io
# kubectl create rolebinding my-sa-view --clusterrole=view --serviceaccount=my-namespace:my-sa --namespace=my-namespace
#
# kubectl create clusterrolebinding my-binding --clusterrole=eagunu --serviceaccount=cicd:app-team1
# #################
# kubectl create clusterrole test02 --verb=create --resource=Deployment,StatefulSet,DaemonSet
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test
subjects:
- kind: ServiceAccount
  name: my-sa
  apiGroup: ""
  namespace: app-team1
roleRef:
  kind: ClusterRole
  name: test02
  apiGroup: ""
####################
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nginx-ingress
subjects:
- kind: ServiceAccount
  name: nginx-ingress
  namespace: nginx-ingress
roleRef:
  kind: ClusterRole
  name: nginx-ingress
  apiGroup: rbac.authorization.k8s.io
